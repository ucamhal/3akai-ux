/*!
 * Copyright 2014 Digital Services, University of Cambridge Licensed
 * under the Educational Community License, Version 2.0 (the
 * "License"); you may not use this file except in compliance with the
 * License. You may obtain a copy of the License at
 *
 *     http://opensource.org/licenses/ECL-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an "AS IS"
 * BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing
 * permissions and limitations under the License.
 */

define(['jquery', 'underscore', 'oae.core', 'jquery.typeahead', 'bootstrap.datepicker', 'globalize'], function($, _, oae) {

    return function(uid, showSettings, widgetData) {

        // The widget container
        var $rootel = $('#' + uid);

        /**
         * Initialise typeahead functionality on a given element, will fetch suggestions from the supplied endpoint with 'q' and 'limit' query parameters.
         *
         * @param  {jQuery}   $el   The element the typeahead functionality should be applied to
         * @param  {String}   name  The name which should be supplied to the typeahead plugin
         * @param  {String}   url   The endpoint to fetch results from
         */
        var initTypeahead = function($el, name, url) {
            $el.typeahead({
                'hint': true,
                'highlight': true
            }, {
                'name': name,
                'displayKey': 'displayName',
                'source': function(query, callback) {
                    $.ajax({
                        'url': url,
                        'data': {
                            'limit': 10,
                            'q': query
                        },
                        'success': function(data) {
                            callback(data.results);
                        }
                    });
                }
            });
        };

        /**
         * Initialise input validation on the form.
         */
        var initFormValidation = function() {
            // Revalidate the funders form section when the other-funders
            // value changes. This is required because other-funders isn't
            // considered part of the funders field by default.
            $('#input-other-funders', $rootel).on('change', function() {
                $('input[name=funders]', $rootel).first().valid();
            });

            // Add a custom validator method to validate the funders component.
            // Requires other-funders to have a value when the Other funder is checked
            $.validator.addMethod('oa-validate-other-funders', function(value, element) {
                if ($('input[name=funders][value=other]', $rootel).is(':checked')) {
                    return $('#input-other-funders', $rootel).val().trim() !== '';
                }
                return true;
            }, 'Enter your funder\'s name');

            // Adds another method to the validator plugin which checks whether a date is in the dd/mm/yyyy format
            $.validator.addMethod('oa-validate-date', function (value, element) {
                return Globalize.parseDate(value, 'dd/MM/yyyy') !== null;
            }, 'Please enter a correct date');

            // Initialise validation on the form
            oae.api.util.validation().validate($('form', $rootel), {
                'errorClass': 'help-block',
                'rules': {
                    'acceptanceDate': {
                        'oa-validate-date': {
                            'depends': function (element) {
                                // Only validate the field if it isn't empty
                                return $(element).val();
                            }
                        }
                    },
                    'funders': {
                        'required': true,
                        'oa-validate-other-funders': true
                    }
                },
                'submitHandler': function(form) {
                    var data = $(form).serializeObject();
                    // Ensure data.funders is an Array
                    data.funders = _.isArray(data.funders) ? data.funders : [data.funders];
                    var funders = _.without(data.funders, 'other');
                    var otherFunders = data['other-funders'];
                    // Prepend all other funders with 'other:' and add them to the funders array
                    _.each(otherFunders.split(','), function(otherFunder) {
                        otherFunder = $.trim(otherFunder);
                        if (otherFunder.length) {
                            funders.push('other:' + otherFunder);
                        }
                    });
                    data.funders = funders;
                    delete data['other-funders'];

                    // Convert the acceptance date to millieseconds
                    var acceptanceDate = Globalize.parseDate(data['acceptanceDate'], 'dd/MM/yyyy');
                    data['acceptanceDate'] = acceptanceDate.valueOf();
                    // Dispatch an event if the form is submitted
                    $(document).trigger('oa.publicationform.submit', data);
                }
            });
        };

        /**
         * Initialise the form
         */
        var initForm = function() {
            // Activate the tooltips on the funder <abbr>s.
            // These are used to explain the funder abbreviations
            $('abbr[data-toggle="tooltip"]', $rootel).tooltip({placement: 'right'});

            // Prefill the email field
            $('#input-email', $rootel).val(oae.data.me.email);

            // Show/hide the other-funders field when the "Other" funder box is checked
            $rootel.on('change', 'input[name=funders][value=other]', function() {
                if ($(this).is(':checked')) {
                    $('#input-other-funders', $rootel).show().focus();
                } else {
                    $('#input-other-funders', $rootel).hide();
                }
            });

            // Clear the comments textarea to avoid placeholder bug
            // @see https://github.com/CUL-DigitalServices/avocet-ui/issues/66
            $('#input-comments', $rootel).val('');

            // Only initialise typeahead and validation functionality if the form isn't disabled
            if (!widgetData || !widgetData.disabled) {
                // Initialise typeahead functionality on the journal and department fields
                initTypeahead($('#input-journal', $rootel), 'journals', '/api/search/journals');
                initTypeahead($('#input-department', $rootel), 'departments', '/api/search/departments');
                // Initialise the datepicker
                $('.input-group.date', $rootel).datepicker({
                    'format': 'dd/mm/yyyy',
                    'keyboardNavigation': false
                });
                // Initialise form validation
                initFormValidation();
            } else {
                // Disable the form
                $('input, textarea', $rootel).prop('disabled', true).attr('placeholder', '');
                $('[type="submit"]', $rootel).parent().hide();
            }

            if (widgetData) {
                // Prefill the form if a prefill object is provided
                if (widgetData.prefill) {
                    _.each(widgetData.prefill.fields, function(fieldValue, fieldName) {
                        $('[name="' + fieldName + '"]', $rootel).val(fieldValue).trigger('change');
                    });

                    _.each(widgetData.prefill.checkboxes, function(checked, checkboxName) {
                        // If checked is passed as an array we assume multiple values are selected for the checkboxName
                        if (_.isArray(checked)) {
                            // Select the checkboxes by name and value and mark them as checked
                            _.each(checked, function(checkboxValue) {
                                $('[name="' + checkboxName + '"][value="' + checkboxValue + '"]').prop('checked', true).trigger('change');
                            });
                        } else {
                            // Checked represents whether the checkbox is checked or not
                            $('[name="' + checkboxName + '"]').prop('checked', checked).trigger('change');
                        }
                    });
                }
            }
        };

        initForm();
    }
});
